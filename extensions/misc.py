from os import remove
from random import randint
from asyncio import sleep

import discord
from discord.ext import commands
from discord_components import Button, ButtonStyle, Select, SelectOption
import qrcode

from .bot_settings import (
    DurationConverter,
    multiplier,
    version,
    is_administrator_or_bot_owner,
    )
from .levels._levels import formula_of_experience
#from ._hltv import HLTV


class Misc(commands.Cog, description='–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã'):
    def __init__(self, bot):
        self.bot = bot
        self.hidden = False



    @commands.command(aliases=['—Ä–∞–Ω–¥–æ–º'], name='random', description='–í—ã–¥–∞—ë—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ', help='[–æ—Ç] [–¥–æ]')
    async def random_num(self, ctx, arg1:int, arg2:int):
        random_number = randint(arg1, arg2)
        await ctx.reply(f'–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: {random_number}')

    @commands.command(name='coin', aliases=['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞','–º–æ–Ω–µ—Ç–∫–∞'], description='–ö–∏–¥–∞–µ—Ç –º–æ–Ω–µ—Ç–∫—É, –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å –æ—Ä—ë–ª –∏–ª–∏ —Ä–µ—à–∫–∞', help=' ')
    async def coinflip(self, ctx):
        result = randint(0,1)
        if result:
            content = '–í–∞–º –≤—ã–ø–∞–ª –û—Ä—ë–ª! <:eagle_coin:855061929827106818>'
        else:
            content = '–í–∞–º –≤—ã–ø–∞–ª–∞ –†–µ—à–∫–∞! <:tail_coin:855060316609970216>'

        await ctx.reply(content)


    @commands.group(
        name='info',
        aliases=['–∏–Ω—Ñ–æ'],
        description='–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞',
        help='[–Ω–∏–∫]',
        invoke_without_command=True)
    async def info(self, ctx:commands.Context, member:discord.Member=None):
        if not member:
            member = ctx.author

        embed = discord.Embed(title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {member}', color=self.bot.get_embed_color(ctx.guild.id))
        embed.set_thumbnail(url=member.avatar_url)

        member_roles = [role.mention for role in member.roles if role.name != "@everyone"][::-1]

        member_roles = ', '.join(member_roles)

        member_status = str(member.status)
        status = {
            'online':'<:s_online:850792217031082051> –í —Å–µ—Ç–∏',
            'dnd':'<:dnd:850792216943525936> –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å',
            'idle':'<:s_afk:850792216732368937> –ù–µ –∞–∫—Ç–∏–≤–µ–Ω',
            'offline':'<:s_offline:850792217262030969> –ù–µ –≤ —Å–µ—Ç–∏'
        }

        embed.add_field(name="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", value=f"""
            **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Discord:** <t:{int(member.created_at.timestamp())}:F>
            **–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:** <t:{int(member.joined_at.timestamp())}:F>
            **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** {status.get(member_status)}
            **–†–æ–ª–∏:** {member_roles}
            """, inline=False)

        if member.bot:
            return await ctx.send(embed=embed)

        stats = ''

        guild_users_collection = self.bot.get_guild_users_collection(ctx.guild.id)
        user = guild_users_collection.find_one({'_id':str(member.id)})

        user_voice_time = user.get('voice_time_count')
        user_leveling = user.get('leveling')
        user_casino = user.get('casino')

        if user_voice_time is not None:
            stats += f'<:voice_time:863674908969926656> **–í—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–º –∫–∞–Ω–∞–ª–µ:** `{user_voice_time}` –º–∏–Ω.'

        if user_leveling:
            user_level = user_leveling['level']
            xp_to_next_level = formula_of_experience(user_level)
            user_xp = user_leveling['xp']
            user_xp_amount =  user_leveling['xp_amount']
            
            stats += f"""
            <:level:863677232239869964> **–£—Ä–æ–≤–µ–Ω—å:** `{user_level}`
            <:exp:863672576941490176> **–û–ø—ã—Ç:** `{user_xp}/{xp_to_next_level}` –í—Å–µ–≥–æ: `{user_xp_amount}`
            """

        if user_casino:
            stats += f'\n <:casino_chips:867817313528971295>  **–§–∏—à–µ–∫:** `{user_casino["chips"]}`'

        if stats:
            embed.add_field(name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', value=stats)

        await ctx.send(embed=embed)


    @info.command(name='server',
    aliases=['s', '—Å–µ—Ä–≤–µ—Ä'],
    description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–µ—Ä–≤–µ—Ä–µ',
    help='')
    async def server_info(self, ctx:commands.Context):
        guild = ctx.guild
        embed = discord.Embed(title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}', color=self.bot.get_embed_color(guild.id))
        embed.add_field(name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', value=f'<t:{int(guild.created_at.timestamp())}:F>', inline=False)
        embed.add_field(name='–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞:', value=guild.owner.mention, inline=False)

        embed.add_field(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', value=f"""
                                                :man_standing: **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {guild.member_count}
                                                :crown: **–†–æ–ª–µ–π:** {len(guild.roles)}
                                                
                                                :hash: **–ö–∞—Ç–µ–≥–æ—Ä–∏–π:** {len(guild.categories)}
                                                :speech_balloon:** –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:** {len(guild.text_channels)}
                                                :speaker: **–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:** {len(guild.voice_channels)}
                                                """)
        embed.set_thumbnail(url=guild.icon_url)

        await ctx.send(embed=embed)

    @info.command(name='bot', description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–æ—Ç–µ', help='')
    async def info_bot(self, ctx:commands.Context):
        prefix = self.bot.get_guild_prefix(ctx.guild.id)
        embed = discord.Embed(title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ', color=self.bot.self.bot.get_embed_color(ctx.guild.id))

        components= [
            Button(style=ButtonStyle.URL, label='–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', url='https://discord.com/api/oauth2/authorize?client_id=828262275206873108&permissions=0&scope=bot')
        ]

        users_amount = sum(len(guild.members) for guild in self.bot.guilds)

        embed.description = f"""
                            **–°–æ–∑–¥–∞—Ç–µ–ª—å:** **Damego#0001**
                            **–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:** `{version}`
                            **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤:** `{len(ctx.bot.guilds)}`
                            **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** `{users_amount}`
                            **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥:** `{len(ctx.bot.commands)}`
                            **–¢–µ–∫—É—â–∏–π –ø–∏–Ω–≥:** `{int(ctx.bot.latency * 1000)}` –º—Å
                            **–ü—Ä–µ—Ñ–∏–∫—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** `{prefix}`
                            """

        await ctx.send(embed=embed, components=components)


    @commands.command(name='qr', aliases=['QR', '–∫–æ–¥'], description='–°–æ–∑–¥–∞—ë—Ç QR-–∫–æ–¥', help='[—Ç–µ–∫—Å—Ç]')
    async def create_qr(self, ctx, *, text):
        qr = qrcode.QRCode(
            version=None,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=1
        )
        qr.add_data(data=text)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        img.save(f'./qrcodes/{ctx.message.author.id}.png')
        await ctx.send(file = discord.File(f'./qrcodes/{ctx.message.author.id}.png'))
        remove(f'./qrcodes/{ctx.message.author.id}.png')


    @commands.command(description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –±–æ—Ç–∞', help='')
    async def ping(self, ctx):
        embed = discord.Embed(title='üèì Pong!', description=f'–ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ `{int(ctx.bot.latency * 1000)}` –º—Å', color=self.bot.get_embed_color(ctx.guild.id))
        await ctx.send(embed=embed)


    @commands.group(name='send',
        description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª',
        help='[–∫–∞–Ω–∞–ª] [—Å–æ–æ–±—â–µ–Ω–∏–µ]',
        invoke_without_command=True,
        usage='–¢–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    @is_administrator_or_bot_owner()
    async def send_message(self, ctx, channel:discord.TextChannel, *, message):
        await channel.send(message)

    @send_message.command(name='delay',
        description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª',
        help='[–∫–∞–Ω–∞–ª] [–≤—Ä–µ–º—è] [—Å–æ–æ–±—â–µ–Ω–∏–µ]',
        usage='–¢–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    @is_administrator_or_bot_owner()
    async def delay_send_message(self, ctx, channel:discord.TextChannel, duration:DurationConverter, *, message):
        amount, time_format = duration
        await sleep(amount * multiplier[time_format])
        await channel.send(message)


    @commands.group(name='announce',
        description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª',
        help='[–∫–∞–Ω–∞–ª] [—Å–æ–æ–±—â–µ–Ω–∏–µ]',
        invoke_without_command=True,
        usage='–¢–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    @is_administrator_or_bot_owner()
    async def announce(self, ctx, channel:discord.TextChannel, *, message):
        embed = discord.Embed(title='–û–±—ä—è–≤–ª–µ–Ω–∏–µ!', description=message, color=self.bot.get_embed_color(ctx.guild.id))
        await channel.send(embed=embed)


    @announce.command(name='delay',
        description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª',
        help='[–∫–∞–Ω–∞–ª] [–≤—Ä–µ–º—è] [—Å–æ–æ–±—â–µ–Ω–∏–µ]',
        usage='–¢–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    @is_administrator_or_bot_owner()
    async def delay(self, ctx, channel:discord.TextChannel, duration:DurationConverter, *, message):
        amount, time_format = duration
        await sleep(amount * multiplier[time_format])

        embed = discord.Embed(title='–û–±—ä—è–≤–ª–µ–Ω–∏–µ!', description=message, color=self.bot.get_embed_color(ctx.guild.id))
        await channel.send(embed=embed)


    @commands.command(name='hltv', description='–í—ã–≤–æ–¥–∏—Ç –¥–∞—Ç—É –±–ª–∏–∂–∞–π—â–∏—Ö –∏–≥—Ä —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–¥–Ω—ã', help='[–∫–æ–º–∞–Ω–¥–∞]')
    async def hltv(self, ctx:commands.Context, *, team):
        await HLTV.parse_mathes(ctx, team)


def setup(bot):
    bot.add_cog(Misc(bot))
